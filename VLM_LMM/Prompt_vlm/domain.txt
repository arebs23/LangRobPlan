(define (domain domain_htn)
	(:requirements :negative-preconditions :typing :hierarchy :universal-preconditions :method-preconditions)
	(:types
		item - locatable
		robot - locatable
		location - object
		locatable - object
	)
	(:predicates
		(in ?arg0 - item ?arg1 - robot)
		(at ?arg0 - locatable ?arg1 - location)
		(free ?arg0 - location)
		(on ?arg0 - item ?arg1 - item ?arg2 - location)
	)
 
	(:task move_item
		:parameters (?o - item ?l - location)
	)
 
	(:task go_to
		:parameters (?r - robot ?l - location)
	)
 
	(:task pick
		:parameters (?r - robot ?l - location ?o - item)
	)
 
	(:task place
		:parameters (?r - robot ?l - location ?o - item)
	)
 
	(:method m_move_item_ordering_0
		:parameters (?l1 - location ?l2 - location ?o - item ?r - robot)
		:task (move_item ?o ?l2)
		:subtasks (and
		 (task0 (go_to ?r ?l1))
		 (task1 (pick ?r ?l1 ?o))
		 (task2 (go_to ?r ?l2))
		 (task3 (place ?r ?l2 ?o))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
		)
	)
 
	(:method m_place_ordering_0
		:parameters (?l - location ?o - item ?r - robot)
		:task (place ?r ?l ?o)
		:subtasks (and
		 (task0 (dump ?r ?l ?o))
		)
	)
 
	(:method m_place_ordering_1
		:parameters (?l - location ?o1 - item ?o2 - item ?r - robot)
		:task (place ?r ?l ?o1)
		:subtasks (and
		 (task0 (stack ?r ?l ?o1 ?o2))
		)
	)
 
	(:method m_pick_ordering_0
		:parameters (?l - location ?o - item ?r - robot)
		:task (pick ?r ?l ?o)
		:subtasks (and
		 (task0 (load ?r ?l ?o))
		)
	)
 
	(:method m_pick_ordering_1
		:parameters (?l - location ?o1 - item ?o2 - item ?r - robot)
		:task (pick ?r ?l ?o1)
		:subtasks (and
		 (task0 (unstack ?r ?l ?o1 ?o2))
		)
	)
 
	(:method m_i_am_there_ordering_0
		:parameters (?l - location ?r - robot)
		:task (go_to ?r ?l)
		:subtasks (and
		 (task0 (noop ?r ?l))
		)
	)
 
	(:method m_move_to_ordering_0
		:parameters (?l1 - location ?l2 - location ?r - robot)
		:task (go_to ?r ?l2)
		:subtasks (and
		 (task0 (move ?r ?l1 ?l2))
		)
	)
 
	(:method m_move_to_ordering_1
		:parameters (?l1 - location ?l2 - location ?r - robot ?o - item)
		:task (go_to ?r ?l2)
		:subtasks (and
		 (task0 (transport ?r ?l1 ?l2 ?o))
		)
	)
 
	(:method m_move_to_ordering_2
		:parameters (?l1 - location ?l2 - location ?l3 - location ?r1 - robot ?r2 - robot)
		:task (go_to ?r1 ?l2)
		:subtasks (and
		(task0 (move ?r2 ?l2 ?l3))
		(task1 (move ?r1 ?l1 ?l2))
		)
		:ordering (and
			(< task0 task1)
		)
	)
 
 
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ACTION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	(:action move
		:parameters (?r - robot ?l1 - location ?l2 - location)
		:precondition 
			(and
				(at ?r ?l1)
				(free ?l2)
				(forall (?o - item)
						(not (in ?o ?r))
				)
			)
		:effect
			(and
				(not (at ?r ?l1))
				(at ?r ?l2)
				(free ?l1)
				(not (free ?l2))
			)
	)
 
	(:action transport
		:parameters (?r - robot ?l1 - location ?l2 - location ?o - item)
		:precondition 
			(and
				(at ?r ?l1)
				(free ?l2)
				(in ?o ?r)
			)
		:effect
			(and
				(not (at ?r ?l1))
				(at ?r ?l2)
				(free ?l1)
				(not (free ?l2))
			)
	)
 
	(:action noop
		:parameters (?r - robot ?l2 - location)
		:precondition 
			(and
				(at ?r ?l2)
			)
		:effect ()
	)
 
	(:action load
		:parameters (?r - robot ?l - location ?o - item)
		:precondition 
			(and
				(at ?r ?l)
				(at ?o ?l)
				(forall (?o2 - item)
						(not (on ?o2 ?o ?l))
				)
			)
		:effect
			(and
				(in ?o ?r)
				(not (at ?o ?l))
			)
	)
 
	(:action dump
		:parameters (?r - robot ?l - location ?o - item)
		:precondition 
			(and
				(at ?r ?l)
				(in ?o ?r)
				(forall (?o2 - item)
					(not (at ?o2 ?l))
				)
			)
		:effect
			(and
				(not (in ?o ?r))
				(at ?o ?l)
			)
	)
 
	(:action stack
		:parameters (?r - robot ?l - location ?o1 - item ?o2 - item)
		:precondition 
			(and
				(at ?r ?l)
				(in ?o1 ?r)
				(at ?o2 ?l)
			)
		:effect
			(and
				(not (in ?o1 ?r))
				(at ?o1 ?l)
				(on ?o1 ?o2 ?l)
			)
	)
 
	(:action unstack
		:parameters (?r - robot ?l - location ?o1 - item ?o2 - item)
		:precondition 
			(and
				(at ?r ?l)
				(at ?o2 ?l)
				(at ?o1 ?l)
				(forall (?o3 - item)
					(not (on ?o3 ?o1 ?l))
				)
				(on ?o1 ?o2 ?l)
			)
		:effect
			(and
				(not (on ?o1 ?o2 ?l))
				(in ?o1 ?r)
				(not (at ?o1 ?l))
			)
	)
 
)